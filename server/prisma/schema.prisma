generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  username         String        @unique
  email            String        @unique
  password         String
  address          String
  eventTypeTallies Int[]
  events           Event_User[]
  groups           Group_User[]
  userProfile      User_Profile?
  interests        Interest[]
}

model User_Profile {
  id         Int    @id @default(autoincrement())
  firstName  String
  lastName   String
  userId     Int    @unique
  user       User   @relation(fields: [userId], references: [id])
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  dateTime    DateTime
  eventType   Int
  interestId  Int?
  interest    Interest?     @relation(fields: [interestId], references: [id])
  attendees   Event_User[]
  groups      Group_Event[]
}

model Group {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  isFull          Boolean       @default(false)
  eventTypeTotals Decimal[]
  events          Group_Event[]
  members         Group_User[]
  interests       Group_Interest[]
}

model Interest {
  id        Int        @id @default(autoincrement())
  title     String
  parentId  Int?
  level     Int
  path      String
  parent    Interest?  @relation("InterestsSubInterests", fields: [parentId], references: [id])
  children  Interest[] @relation("InterestsSubInterests")

  users     User[]
  groups    Group_Interest[]
  events    Event[]
}

model Event_User {
  userId   Int
  eventId  Int
  status   Status @default(PENDING)
  event    Event  @relation(fields: [eventId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
}

model Group_User {
  userId              Int
  groupId             Int
  status              Status     @default(PENDING)
  compatibilityRatio  Decimal    @default("0.00")
  group               Group      @relation(fields: [groupId], references: [id])
  user                User       @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
}

model Group_Event {
  groupId  Int
  eventId  Int
  event    Event @relation(fields: [eventId], references: [id])
  group    Group @relation(fields: [groupId], references: [id])

  @@id([groupId, eventId])
}

model Group_Interest {
  groupId     Int
  interestId  Int
  interest    Interest @relation(fields: [interestId], references: [id])
  group       Group @relation(fields: [groupId], references: [id])

  @@id([groupId, interestId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  DROPPED
}